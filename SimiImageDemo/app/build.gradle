plugins {
    id 'com.android.application'
}
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {

    defaultConfig {
        applicationId "com.ex.simi"
        minSdk 21
        targetSdk 30
        versionCode 1
        versionName "1.0"
        multiDexEnabled = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        ndk { abiFilters 'armeabi-v7a', "arm64-v8a" }

        javaCompileOptions {
            annotationProcessorOptions {// arguments += 才能兼容其他引用的配置
                arguments += ["room.schemaLocation":
                                      "$projectDir/schemas".toString()]
            }
        }
    }

    setProperty("archivesBaseName", "SimiImage " + defaultConfig.versionName + "-" + defaultConfig.versionCode + "-" + getGitHeadRefsSuffix() + "-" + releaseTime())

    signingConfigs {
        release {
            storeFile file('../Untitled')
            storePassword '123456'
            keyAlias 'pwj'
            keyPassword '123456'
        }
    }

    buildTypes {
        debug {
            buildConfigField "boolean", "LOG_DEBUG", "true"
            signingConfig signingConfigs.release
        }

        release {
            buildConfigField "boolean", "LOG_DEBUG", "true"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    ndkVersion '21.2.6472646'
    compileSdkVersion 31
}

dependencies {

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    implementation 'androidx.multidex:multidex:2.0.1'

    implementation project(path: ':OpencvSdk')

    def room_version = "2.4.2"
    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"

    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:3.0.4'
    implementation 'androidx.recyclerview:recyclerview:1.2.0-beta01'
    implementation 'androidx.viewpager2:viewpager2:1.1.0-alpha01'

    //RXJava
    implementation 'io.reactivex.rxjava2:rxjava:2.2.17'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'

    //glide
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'

    implementation 'org.greenrobot:eventbus:3.1.1'

    //lottie animation
    implementation 'com.airbnb.android:lottie:3.4.1'

    def versions = "2.7.1"
    implementation "androidx.work:work-runtime:$versions"

    //hilt
//    def hilt_version = '2.33-beta'
//    implementation "com.google.dagger:hilt-android:$hilt_version"
//    implementation 'androidx.hilt:hilt-lifecycle-viewmodel:1.0.0-alpha03'
//    annotationProcessor "com.google.dagger:hilt-compiler:$hilt_version"
}

static def getBuildId() {
    return new Date().format("yyyyMMddHHmm")
}

static def releaseTime() {
    return new Date().format("yyyy-MM-dd-HHmmss")
}

//提取git commit id
static def getGitHeadRefsSuffix() {
    try {
        def headFile = new File('../.git/HEAD')
        if (headFile.exists()) {
            String[] strings = headFile.getText('UTF-8').split(" ");
            if (strings.size() > 1) {
                String refFilePath = '../.git/' + strings[1];
                def refFile = new File(refFilePath.replace("\n", ""));
                return refFile.getText('UTF-8').substring(0, 7)
            }
        }
    } catch (Exception e) {
        e.printStackTrace()
    }
    return ""
}